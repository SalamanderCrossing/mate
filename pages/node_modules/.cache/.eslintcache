[{"/home/bluesk/Documents/mate/pages/src/index.tsx":"1","/home/bluesk/Documents/mate/pages/src/reportWebVitals.ts":"2","/home/bluesk/Documents/mate/pages/src/App.tsx":"3","/home/bluesk/Documents/mate/pages/src/SearchBar.tsx":"4","/home/bluesk/Documents/mate/pages/src/ModuleView.tsx":"5"},{"size":554,"mtime":1672320076875,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1672320076915,"results":"8","hashOfConfig":"7"},{"size":193,"mtime":1671030234460,"results":"9","hashOfConfig":"7"},{"size":8742,"mtime":1672336136813,"results":"10","hashOfConfig":"7"},{"size":3429,"mtime":1672335566153,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i585v7",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29"},"/home/bluesk/Documents/mate/pages/src/index.tsx",[],[],"/home/bluesk/Documents/mate/pages/src/reportWebVitals.ts",[],[],"/home/bluesk/Documents/mate/pages/src/App.tsx",[],[],[],"/home/bluesk/Documents/mate/pages/src/SearchBar.tsx",["30","31","32","33"],[],"import \"./SearchBar.css\";\nimport ModuleView from \"./ModuleView\";\nimport { useEffect, useState } from \"react\";\n\nexport default () => {\n  const componentTypes = [\"models\", \"trainers\", \"data_loaders\"];\n  const [selectedProjects, setSelectedProjects] = useState(\n    {} as Record<string, Record<string, any>>\n  );\n  const [components, setComponents] = useState({\n    data_loaders: [],\n    models: [],\n    trainers: [],\n    experiments: [],\n  } as Record<string, Record<string, any>[]>);\n  const [dependencies, changeDedendencies] = useState<string[]>([]);\n  const [selectedComponents, setSelectedComponents] = useState(\n    [] as Record<string, any>\n  );\n  useEffect(() => {\n    (async () => {\n      const tmpComponents = Object.fromEntries(\n        Object.entries(components).map(([e, v]) => [e, {}])\n      ) as Record<string, Record<string, any>>;\n      //const proto = await fetch(\"./items.json\");\n      const proto = await fetch(\n        \"https://api.github.com/search/repositories?q=builtwithmate+in:readme\"\n      );\n      const projects = (await proto.json()).items as Record<string, any>;\n      const projectsWithUrl = projects.map((x: Record<string, any>) => {\n        return {\n          ...x,\n          projects_url: `https://raw.githubusercontent.com/${x.full_name}/main/.mate/projects.json`,\n        };\n      });\n      for await (const projectWithUrl of projectsWithUrl) {\n        const result = await fetch(projectWithUrl[\"projects_url\"]);\n        const resultJson = (await result.json()) as Record<\n          string,\n          Record<string, Record<string, Record<string, Record<string, string>>>>\n        >;\n        for await (const mateProjectStructure of Object.values(resultJson)) {\n          for await (const [moduleType, modules] of Object.entries(\n            mateProjectStructure[\"project\"]\n          )) {\n            for await (const mateModule of Object.values(modules)) {\n              const moduleId =\n                moduleType + mateModule[\"name\"] + projectWithUrl[\"full_name\"];\n              tmpComponents[moduleType as string][moduleId as string] = {\n                ...(mateModule as Record<string, any>),\n                project: projectWithUrl as Record<string, any>,\n                root_dir: `${projectWithUrl.html_url}/tree/main${mateProjectStructure[\"root\"]}/${moduleType}/${mateModule[\"name\"]}`,\n              };\n            }\n          }\n        }\n      }\n      setComponents(\n        Object.fromEntries(\n          Object.entries(tmpComponents).map(([e, v]) => [e, Object.values(v)])\n        )\n      );\n    })();\n  }, []);\n  const search = () => {\n    const select = document.getElementById(\"exampleFormControlSelect1\")\n    if (select !== null){\n      const componentType = (\n         select as HTMLInputElement\n      ).value;\n      const valuesType = components[componentType];\n      const isSubSet = (target: [string, string][]): boolean => {\n        const s2 = target.map((x) => x[0]);\n        console.log({s2})\n        console.log({dependencies})\n        const result = dependencies.every(x => s2.includes(x));\n        return result\n      };\n      const selectedValues = valuesType.filter((x) =>\n        \"dependencies\" in x\n          ? isSubSet(x[\"dependencies\"] as [string, string][])\n          : false\n      );\n      if (JSON.stringify(selectedValues) !== JSON.stringify(selectedComponents)){\n        setSelectedComponents(selectedValues);\n      }\n    }\n  };\n  search()\n\n  const handleAddTag = () => {\n    const input = document.getElementById('dep') as HTMLInputElement\n    const inputValue = input.value\n    if (inputValue.trim() !== \"\") {\n      input.value = \"\"\n      changeDedendencies([...dependencies, inputValue]);\n    }\n  };\n\n  const handleRemoveTag = (index: number) => {\n    changeDedendencies(dependencies.filter((_, i) => i !== index));\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      handleAddTag();\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {/*\n      <img\n        style={{\n          background: \"url(logo.jpeg)\",\n          width: \"450px\",\n          height: \"450px\",\n          objectFit: \"cover\",\n          backgroundPosition: \"5% bottom\",\n          scale: \"0.5\",\n          borderRadius: \"50%\",\n          marginTop: \"-100px\",\n          marginBottom: \"-100px\",\n        }}\n      />\n      */}\n      <div\n        className=\"input-group input-group-lg noselect\"\n        style={{\n          borderColor: \"#5f8d4e\",\n          maxWidth: \"700px\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginBottom: \"5px\",\n          marginTop: \"30px\",\n          //borderRadius: \"50%\",\n          color: \"#000\",\n        }}\n      >\n        <div\n          className=\"input-group-prepend input-group-lg\"\n          style={{ borderRadius: \"30px\" }}\n        >\n          <span\n            style={{\n              borderRadius: \"30px 0 0 30px\",\n              background: \"#5F8D4E\",\n              borderColor: \"#285430\",\n            }}\n            className=\"input-group-text\"\n          >\n            Type\n          </span>\n        </div>\n        <div className=\"input-group-lg\" style={{ borderRadius: \"0 0 0 0\" }}>\n          <select\n            className=\"form-select form-select-lg noselect\"\n            onChange={search}\n            style={{\n              maxWidth: \"150px\",\n              background: \"#5F8D4E\",\n              borderColor: \"#285430\",\n              borderRadius: \"0 0 0 0\",\n            }}\n            id=\"exampleFormControlSelect1\"\n          >\n            {componentTypes.map((m, i) => (\n              <option\n                className=\"noselect\"\n                style={{ borderRadius: \"0 0 0 0\" }}\n                key={i.toString()}\n              >\n                {m}\n              </option>\n            ))}\n          </select>\n        </div>\n        {/*<TagInput tags={tags} onChange={changeTags} />*/}\n        <span\n          className=\"input-group-text input-group-prepend\"\n          style={{\n            borderRadius: \"0 0 0 0\",\n            background: \"#5F8D4E\",\n            borderColor: \"#285430\",\n          }}\n          onClick={handleAddTag}\n        >\n          Add Dependency\n        </span>\n\n        <input\n          type=\"text\"\n          id='dep'\n          onKeyDown={handleKeyDown}\n          className=\"form-control\"\n          style={{\n            borderRadius: \"0 30px 30px 0\",\n            maxWidth: \"150px\",\n            background: \"#5F8D4E\",\n            borderColor: \"#285430\",\n          }}\n        />\n      </div>\n      <div>\n        {dependencies.map((tag, index) => (\n          <span>\n            <span\n              className=\"badge badge-pill badge-primary\"\n              style={{ border: \"1px solid\", margin: \"1px\" }}\n              key={index}\n            >\n              {tag}\n              <button\n                className=\"btn btn-sm p-0\"\n                style={{\n                  marginLeft: \"3px\",\n                  marginTop: \"0\",\n                  marginBottom: \"3px\",\n                }}\n                onClick={() => handleRemoveTag(index)}\n              >\n                x\n              </button>\n            </span>\n          </span>\n        ))}\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div\n              className=\"card card-margin\"\n              style={{\n                background: \"#A4BE7B\",\n                display: selectedComponents.length > 0 ? \"block\" : \"none\",\n              }}\n            >\n              <div\n                className=\"card-body\"\n                style={{\n                  minHeight: \"0\",\n                  display: selectedComponents.length > 0 ? \"block\" : \"none\",\n                }}\n              >\n                <div className=\"row search-body\">\n                  <div className=\"col-lg-12\">\n                    <div className=\"search-result\">\n                      <div className=\"result-body\">\n                        <div className=\"table-responsive\">\n                          <table style={{ width: \"100%\" }}>\n                            <tbody\n                              className=\"widget-26\"\n                              style={{ width: \"100%\" }}\n                            >\n                              {selectedComponents.map(\n                                (c: Record<string, any>) =>\n                                  ModuleView({ module: c })\n                              )}\n                            </tbody>\n                          </table>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/home/bluesk/Documents/mate/pages/src/ModuleView.tsx",["34","35","36","37"],[],"//import MateModule from \"./projects/mate_module\";\nexport default ({ module }: { module: Record<string, any> }) => {\n  const formatter = new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n  const dependencies = module[\"dependencies\"];\n  const copyToClipboard = () => {\n    const el = document.createElement(\"textarea\");\n    el.value = module.root_dir;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(el);\n  };\n  return (\n    <tr key={Math.random()}>\n      <td>\n        <div className=\"widget-26-job-emp-img\">\n          <img\n            src={module.project.owner.avatar_url}\n            style={{ width: \"50px\", borderRadius: \"50%\" }}\n          />\n        </div>\n      </td>\n      <td style={{ textAlign: \"left\" }}>{module.project.full_name}</td>\n      <td>{module.name}</td>\n      <td>\n        <div className=\"widget-26-job-info\">\n          <p className=\"type m-0\">\n            Created:{\" \"}\n            {formatter.format(new Date(Date.parse(module.project.created_at)))}\n          </p>\n          <p className=\"text-muted m-0\">\n            Updated:{\" \"}\n            {formatter.format(new Date(Date.parse(module.project.updated_at)))}\n          </p>\n        </div>\n      </td>\n      <td>\n        <a href={module.root_dir} target=\"_blank\">\n          Open\n        </a>\n      </td>\n      <td>{dependencies !== undefined ? dependencies.length : \"No deps\"}</td>\n      <td>\n        <button onClick={copyToClipboard} className=\"btn btn-primary\">\n          <svg\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"black\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M8 2C7.44772 2 7 2.44772 7 3C7 3.55228 7.44772 4 8 4H10C10.5523 4 11 3.55228 11 3C11 2.44772 10.5523 2 10 2H8Z\"\n              fill=\"black\"\n            />{\" \"}\n            <path\n              d=\"M3 5C3 3.89543 3.89543 3 5 3C5 4.65685 6.34315 6 8 6H10C11.6569 6 13 4.65685 13 3C14.1046 3 15 3.89543 15 5V11H10.4142L11.7071 9.70711C12.0976 9.31658 12.0976 8.68342 11.7071 8.29289C11.3166 7.90237 10.6834 7.90237 10.2929 8.29289L7.29289 11.2929C6.90237 11.6834 6.90237 12.3166 7.29289 12.7071L10.2929 15.7071C10.6834 16.0976 11.3166 16.0976 11.7071 15.7071C12.0976 15.3166 12.0976 14.6834 11.7071 14.2929L10.4142 13H15V16C15 17.1046 14.1046 18 13 18H5C3.89543 18 3 17.1046 3 16V5Z\"\n              fill=\"black\"\n            />{\" \"}\n            <path\n              d=\"M15 11H17C17.5523 11 18 11.4477 18 12C18 12.5523 17.5523 13 17 13H15V11Z\"\n              fill=\"black\"\n            />\n          </svg>\n        </button>\n      </td>\n      <td>\n        <div className=\"widget-26-job-starred starred\">\n          {module.project.stargazers_count + \" \"}\n          <a href=\"#\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"#fd8b2c\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"feather feather-star\"\n            >\n              <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n            </svg>\n          </a>\n        </div>\n      </td>\n    </tr>\n  );\n};\n",{"ruleId":"38","severity":1,"message":"39","line":5,"column":1,"nodeType":"40","endLine":275,"endColumn":3},{"ruleId":"41","severity":1,"message":"42","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":7,"column":28,"nodeType":"43","messageId":"44","endLine":7,"endColumn":47},{"ruleId":"46","severity":1,"message":"47","line":64,"column":6,"nodeType":"48","endLine":64,"endColumn":8,"suggestions":"49"},{"ruleId":"38","severity":1,"message":"39","line":2,"column":1,"nodeType":"40","endLine":94,"endColumn":3},{"ruleId":"50","severity":1,"message":"51","line":21,"column":11,"nodeType":"52","endLine":24,"endColumn":13},{"ruleId":"53","severity":1,"message":"54","line":42,"column":9,"nodeType":"52","messageId":"55","endLine":42,"endColumn":51,"fix":"56"},{"ruleId":"57","severity":1,"message":"58","line":74,"column":11,"nodeType":"52","endLine":74,"endColumn":23},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'selectedProjects' is assigned a value but never used.","Identifier","unusedVar","'setSelectedProjects' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'components'. Either include it or remove the dependency array.","ArrayExpression",["59"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"60","text":"61"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"62","fix":"63"},[1354,1354]," rel=\"noreferrer\"","Update the dependencies array to be: [components]",{"range":"64","text":"65"},[2552,2554],"[components]"]