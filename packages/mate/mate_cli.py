import os
from .mate_api import MateAPI
from rich import print
from rich.console import Console
from typing import Optional


class MateCLI:
    """
# Mate CLI

The following commands work within a mate project folder, that is, where the `mate.json` file is located. This file will be generated by the `init` command (see below).

"""

    def __init__(self):
        """
        Initializes mate
        """
        self.current_folder = os.path.dirname(__file__)
        self.api = MateAPI()

    @staticmethod
    def init(project_name: str, **params: str):
        """
:param project_name: Name of the project
:param params: Parameters to pass to the project. These are the same key-value pairs that are in the `mate.json` file (check out that section).

Creates a new mate project in the current folder.

**Example**

```
mate init my_fancy_project venv=false
```"""
        MateAPI.init(project_name, params)

    def md(self):
        """

Prints the markdown documentation of the project"""
        print(self.api.to_markdown())

    def pip(self, *commands: str):
        """
:param ..commands: Just a proxy to the pip command


Executes inside the python venv

```
mate pip install numpy
```"""
        self.api.pip(*commands)

    def remove(self, target: str):
        """
:param target: Path to the module to remove

Removes a module"""
        self.api.remove(target)

    def show(self, path: str):
        """
:param path: Path to the module to show

Shows information about a module or experiment."""
        self.api.show(path)

    def venv(self, command: str):
        """
:param command: Command to run in the virtual environment
Executes inside the python venv"""
        self.api.venv(command)

    def summary(self, svg: bool = False):
        """
        :param svg: Export result as svg
        Prints a summary of the mate project.
        """
        if not svg:
            print(self.api.to_tree())
        else:
            console = Console(width=50, record=True)
            console.print(self.api.to_tree())
            console.save_svg("summary.svg", title="mate summary")

    def results(self, svg: bool = False):
        """
Prints results"""
        results_table = self.api.results()
        if results_table is not None:
            if not svg:
                print(results_table)
            else:
                console = Console(width=50, record=True)
                console.print(results_table)
                console.save_svg("results.svg", title="mate results")
        else:
            print("No results found.")

    def clone(self, source_model: str, target_model: str):
        """
:param source_model: Path to the source model
:param target_model: Path to the target model
Clones a module"""
        self.api.clone(source_model, target_model)

    def create(self, path: str):
        """
:param path: Path to the module to create (relative to the project folder)

Creates a new module
The path respects the python format, (e.g. `my_module.sub_module`)."""
        self.api.create(path)

    def inspect(self, path: str):
        """
:param path: Path to the module to inspect

Provides information about a module, such as:

- exported functions, classes
- imported modules in the case of experiments/analyses
- errors found by mate

**Example**

```
mate inspect experiments.my_experiment
```"""
        self.api.inspect(path)

    def run(self, target: str, command: Optional[str] = None):
        """
:param target: Name of the experiment to run
:param command: Command to run

Runs an experiment or analysis. By default, mate assumes that you want to run an expriment.

**Examples**

```
mate run my_experiment train
```
is equivalent to
```
mate run experiments.my_experiment train
```

Alternatively, you can run an analysis:
```
mate run analyses.my_analysis
```"""
        self.api.run(target=target, command=command)

    def rename(self, path: str, name: str):
        """
:param path: Path to the module to rename
:param name: New name of the module

Renames a module.
"""
        self.api.rename(path, name)

    def export(self, source: str):
        """
        :param source: Path to the object to export
        Exports a function/class from a module
        """
        self.api.export(source)

    def install(self, url: str):
        """
        :param url: URL to the package to install
        Installs a module from url. The URL must be a git repository and point to the full path of the module.

        """
        self.api.install(url)
